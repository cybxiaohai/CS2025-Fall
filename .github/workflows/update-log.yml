# .github/workflows/update-log.yml
name: Update Learning Log
on:
  schedule:
    - cron: "0 0 * * 1" # 北京时间 周一 8:00）
  push:
    branches:
      - main
  workflow_dispatch: # 允许手动触发
    inputs:
      message:
        description: "自定义日志内容" # 输入框描述
        required: false
        default: "本周学习继续中..."

jobs:
  update-log:
    name: 生成并更新学习日志
    runs-on: ubuntu-latest # 使用最新的Ubuntu环境

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPOPAT}}
          persist-credentials: true # 保持凭据以便后续推送
      - name: 设置Git用户信息
        run: |
          git config --global user.name "cybxiaohai"
          git config --global user.email "icec41311@gmail.com"

      - name: 配置SSH密钥
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          #重试3次获取github.com的SSH
          for i in 1 2 3; do
            echo "获取github.com的SSH密钥，尝试第 $i 次"
            if ssh-keyscan -t rsa ,ecdsa,ed25519 github.com >> ~/.ssh/known_hosts 2>/dev/null; then
              echo "成功获取github.com的SSH密钥"
              chmod 644 ~/.ssh/known_hosts
              break
            elif [ $i -eq 3 ]; then
              echo "获取github.com的SSH密钥失败，达到最大重试次数，退出"
              exit 1
            else
              echo "获取失败，等待3秒后重试..."
              sleep 3
            fi
          done

        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 准备日志内容
        id: prepare
        run: |


          #获取当前UTC时间并转换为北京时间
          DATE=$(TZ='Asia/Shanghai' date "+%Y-%m-%d")
          DATETIME=$(TZ='Asia/Shanghai' date "+%Y-%m-%d %H:%M")

          #获取输入的消息
          MESSAGE="${{ inputs.message }}"
          MESSAGE=$(echo "$MESSAGE" | tr -d '\n\r' | cut -c1-200) # 限制长度为200字符
          LOG_FILE="docs/学习日志.md"

          #如果没有提供消息，使用默认消息
          if [ -z "$MESSAGE" ]; then
                      MESSAGE="本周学习继续中..."
          fi

          # 确保日志文件目录存在
          mkdir -p "$(dirname "$LOG_FILE")"

          # 如果日志文件不存在，创建初始结构
          if [ ! -f "$LOG_FILE" ]; then
            echo "# 学习日志" > "$LOG_FILE"
            echo "" >> "$LOG_FILE"
            echo "本文件由 GitHub 自动更新，记录每周学习进展。" >> "$LOG_FILE"
            echo "" >> "$LOG_FILE"
            # 直接写入新条目（首次）
            echo "## $DATE" >> "$LOG_FILE"
            echo "- $DATETIME: $MESSAGE" >> "$LOG_FILE"
            git add "$LOG_FILE"
            git commit -m "初始化学习日志: $MESSAGE ($DATETIME)"
            git push origin HEAD:main
            exit 0
          fi

          # 创建临时文件
          TEMP_FILE=$(mktemp)
          #标记是否已插入新条目
          INSERTED=false

          # 读取原文件，按行处理
          while IFS= read -r line || [ -n "$line" ]; do
            # 检测标题行（日期格式）
            if [[ $line =~ ^##[[:space:]]*[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
              # 提取标题中的日期
              HEADER_DATE=$(echo "$line" | grep -oE '[0-9]{4}-[0-9]{2}-[0-9]{2}')
              
              if [[ "$HEADER_DATE" == "$DATE" ]]; then
                # 同一天：输出标题 + 新条目
                echo "$line" >> "$TEMP_FILE"
                echo "- $DATETIME: $MESSAGE" >> "$TEMP_FILE"
                INSERTED=true
                
                continue
              elif [[ "$HEADER_DATE" < "$DATE" ]] && [[ "$INSERTED" == "false" ]]; then
                # 新日期应插在此前（倒序）
                echo "## $DATE" >> "$TEMP_FILE"
                echo "- $DATETIME: $MESSAGE" >> "$TEMP_FILE"
                echo "" >> "$TEMP_FILE"
                INSERTED=true
              fi
            fi
            # 默认：原样输出
            echo "$line" >> "$TEMP_FILE"
          done < "$LOG_FILE"

          # 如果从未插入，且文件非空
          if [[ "$INSERTED" == "false" ]]; then
             # 在文件顶部插入新条目
              {
                echo "## $DATE"
                echo "- $DATETIME: $MESSAGE"
                echo ""
                cat "$LOG_FILE"
              } > "$TEMP_FILE"
          fi
          # 替换原文件
          mv "$TEMP_FILE" "$LOG_FILE"




          # 提交（避免空提交）
          if git diff-index --quiet HEAD -- ; then
            echo "没有变更，跳过提交"
            exit 0
          fi

          git add "$LOG_FILE"
          COMMIT_MSG="自动更新学习日志: $(printf '%q' "$MESSAGE")($DATETIME)"
          git commit -m "$COMMIT_MSG"
          git push origin HEAD:main
